// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: transport/transport.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicatorServiceClient is the client API for ReplicatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicatorServiceClient interface {
	LocalRead(ctx context.Context, in *LocalReadRequest, opts ...grpc.CallOption) (*LocalReadResponse, error)
	LocalWrite(ctx context.Context, in *LocalWriteRequest, opts ...grpc.CallOption) (*LocalWriteResponse, error)
}

type replicatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatorServiceClient(cc grpc.ClientConnInterface) ReplicatorServiceClient {
	return &replicatorServiceClient{cc}
}

func (c *replicatorServiceClient) LocalRead(ctx context.Context, in *LocalReadRequest, opts ...grpc.CallOption) (*LocalReadResponse, error) {
	out := new(LocalReadResponse)
	err := c.cc.Invoke(ctx, "/transport.ReplicatorService/LocalRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorServiceClient) LocalWrite(ctx context.Context, in *LocalWriteRequest, opts ...grpc.CallOption) (*LocalWriteResponse, error) {
	out := new(LocalWriteResponse)
	err := c.cc.Invoke(ctx, "/transport.ReplicatorService/LocalWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatorServiceServer is the server API for ReplicatorService service.
// All implementations must embed UnimplementedReplicatorServiceServer
// for forward compatibility
type ReplicatorServiceServer interface {
	LocalRead(context.Context, *LocalReadRequest) (*LocalReadResponse, error)
	LocalWrite(context.Context, *LocalWriteRequest) (*LocalWriteResponse, error)
	mustEmbedUnimplementedReplicatorServiceServer()
}

// UnimplementedReplicatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReplicatorServiceServer struct {
}

func (UnimplementedReplicatorServiceServer) LocalRead(context.Context, *LocalReadRequest) (*LocalReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalRead not implemented")
}
func (UnimplementedReplicatorServiceServer) LocalWrite(context.Context, *LocalWriteRequest) (*LocalWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalWrite not implemented")
}
func (UnimplementedReplicatorServiceServer) mustEmbedUnimplementedReplicatorServiceServer() {}

// UnsafeReplicatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatorServiceServer will
// result in compilation errors.
type UnsafeReplicatorServiceServer interface {
	mustEmbedUnimplementedReplicatorServiceServer()
}

func RegisterReplicatorServiceServer(s grpc.ServiceRegistrar, srv ReplicatorServiceServer) {
	s.RegisterService(&ReplicatorService_ServiceDesc, srv)
}

func _ReplicatorService_LocalRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServiceServer).LocalRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.ReplicatorService/LocalRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServiceServer).LocalRead(ctx, req.(*LocalReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicatorService_LocalWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServiceServer).LocalWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.ReplicatorService/LocalWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServiceServer).LocalWrite(ctx, req.(*LocalWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicatorService_ServiceDesc is the grpc.ServiceDesc for ReplicatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.ReplicatorService",
	HandlerType: (*ReplicatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocalRead",
			Handler:    _ReplicatorService_LocalRead_Handler,
		},
		{
			MethodName: "LocalWrite",
			Handler:    _ReplicatorService_LocalWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/transport.proto",
}
